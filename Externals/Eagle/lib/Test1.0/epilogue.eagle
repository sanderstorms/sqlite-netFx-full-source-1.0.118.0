###############################################################################
#
# epilogue.eagle --
#
# Extensible Adaptable Generalized Logic Engine (Eagle)
# Test Epilogue File
#
# Copyright (c) 2007-2012 by Joe Mistachkin.  All rights reserved.
#
# See the file "license.terms" for information on usage and redistribution of
# this file, and for a DISCLAIMER OF ALL WARRANTIES.
#
# RCS: @(#) $Id: $
#
###############################################################################

if {![info exists no([file tail [info script]])]} then {
  if {[info level] > 0} then {
    error "cannot run, current level is not global"
  }

  #
  # NOTE: Verify that the current call frame is correct and that the
  #       interpreter call stack has not been imbalanced by previous
  #       tests or other errors.  This check only applies to Eagle.
  #
  if {[isEagle] && [llength [info commands object]] > 0} then {
    #
    # NOTE: Check the name of the current call frame against the one
    #       that should be used for evaluating this script file.
    #
    if {[object invoke -flags +NonPublic \
            Interpreter.GetActive.CurrentFrame Name] ne \
        [list source [file normalize [info script]]]} then {
      unset -nocomplain test_suite_running
      error "cannot run epilogue, current frame not for this script"
    }
  }

  #
  # NOTE: Make sure all the variables used by this epilogue are unset.
  #
  unset -nocomplain haveStartSentry operationCount memory stack \
      name count percent exitCode milliseconds code dictionary \
      error usageKind usageType pair usageData key value cmdType \
      usage

  #
  # HACK: Maybe process events for a little while on this thread to
  #       give the window manager the opporutnity to hopefully remove
  #       closed windows, etc, from the screen.
  #
  if {![info exists no(epilogueEvents)] && [needTestDoEvents]} then {
    if {[isEagle] || [haveConstraint tcl85OrHigher]} then {
      set expr {max(2000, $test_timeout)}

      set milliseconds [expr $expr]

      unset expr
    } else {
      set milliseconds 2000; # HACK: Tcl 8.4, no max()
    }

    tputs $test_channel [appendArgs \
        "---- processing pending events for about " $milliseconds \
        " milliseconds... "]

    testDoEvents $milliseconds

    tputs $test_channel done\n

    unset milliseconds
  }

  #
  # NOTE: Show when the tests actually ended (now).
  #
  tputs $test_channel [appendArgs "---- tests ended at " \
      [formatTimeStamp [set test_timestamp(endSeconds) \
      [clock seconds]]] \n]

  #
  # NOTE: We can only calculate the elapsed seconds for the tests if
  #       the necessary variables exist and contain valid values.
  #
  if {[info exists test_timestamp(startSeconds)] && \
      [string is integer -strict $test_timestamp(startSeconds)] && \
      [info exists test_timestamp(endSeconds)] && \
      [string is integer -strict $test_timestamp(endSeconds)]} then {
    #
    # NOTE: First, figure out how many whole seconds elapsed during
    #       roughly the entire testing process (which is rougly the
    #       same time taken to just run the tests themselves).
    #
    set test_timestamp(elapsedSeconds) [expr \
        {$test_timestamp(endSeconds) - $test_timestamp(startSeconds)}]

    #
    # NOTE: Show (and log) the number of elapsed seconds and possibly
    #       a human readable elapsed time string as well.
    #
    tputs $test_channel [appendArgs "---- tests took approximately " \
        [formatElapsedTime $test_timestamp(elapsedSeconds)] \n]
  }

  #
  # NOTE: Show the ending command count (for both Tcl and Eagle).
  #
  tputs $test_channel [appendArgs "---- ending command count: " \
      [info cmdcount] \n]

  #
  # NOTE: Maybe check for the start-of-log sentry in the test log file.
  #       If it is not found, there is a problem.
  #
  if {![info exists no(checkLogStartSentry)]} then {
    set haveStartSentry [doesTestLogHaveStartSentry]

    if {$haveStartSentry} then {
      tputs $test_channel "---- found start-of-log sentry\n"
    } else {
      tputs $test_channel "---- missing start-of-log sentry\n"
    }
  } else {
    set haveStartSentry false

    tputs $test_channel "---- skipped start-of-log sentry\n"
  }

  if {[isEagle]} then {
    #
    # NOTE: We can only calculate the elapsed microseconds for the tests
    #       if the necessary variables exist and contain valid values.
    #
    if {[info exists test_timestamp(startCount)] && \
        [string is wideinteger -strict $test_timestamp(startCount)]} then {
      #
      # NOTE: First, figure out how many microseconds elapsed during
      #       roughly the entire testing process (which is rougly the
      #       same time taken to just run the tests themselves).
      #
      catch {
        set test_timestamp(elapsedMicroseconds) \
            [clock stop $test_timestamp(startCount)]
      }

      #
      # NOTE: Show the approximate number of elapsed microseconds.
      #
      if {[info exists test_timestamp(elapsedMicroseconds)] && [string \
          is double -strict $test_timestamp(elapsedMicroseconds)]} then {
        tputs $test_channel [appendArgs "---- tests took approximately " \
            [formatDecimal $test_timestamp(elapsedMicroseconds)] \
            " microseconds\n"]
      }
    }

    #
    # NOTE: Show the ending operation count (for Eagle only).
    #
    if {[llength [info commands object]] > 0} then {
      catch {
        object invoke -flags +NonPublic Interpreter.GetActive OperationCount
      } operationCount
    } else {
      set operationCount unavailable
    }

    tputs $test_channel [appendArgs "---- ending operation count: " \
        $operationCount \n]

    unset operationCount

    #
    # NOTE: Maybe show the current state of the CPU.
    #
    if {![info exists no(showEndingCpu)]} then {
      set cpu(0) [catch {getCpuStatus} cpu(1)]

      tputs $test_channel [appendArgs "---- ending cpu: " \
          [formatListAsDict [expr {$cpu(0) == 0 ? $cpu(1) : ""}] \
          <none>] \n]

      unset cpu
    }

    #
    # NOTE: Maybe show the current state of the memory.
    #
    if {![info exists no(showEndingMemory)]} then {
      set memory(0) [catch {debug memory} memory(1)]

      tputs $test_channel [appendArgs "---- ending memory: " \
          [formatListAsDict [expr {$memory(0) == 0 ? $memory(1) : ""}] \
          <none>] \n]

      unset memory
    }

    #
    # NOTE: Maybe show the current state of the native stack.
    #
    if {![info exists no(showEndingStack)]} then {
      set stack(0) [catch {debug stack true} stack(1)]

      tputs $test_channel [appendArgs "---- ending stack: " \
          [formatListAsDict [expr {$stack(0) == 0 ? $stack(1) : ""}] \
          <none>] \n]

      unset stack
    }

    #
    # NOTE: Maybe show the (maximum?) levels that were hit by whichever
    #       tests actually ran.
    #
    if {![info exists no(showEndingLevels)]} then {
      set levels(0) [catch {debug levels} levels(1)]

      tputs $test_channel [appendArgs "---- ending levels: " \
          [formatListAsDict [expr {$levels(0) == 0 ? $levels(1) : ""}] \
          <none>] \n]

      unset levels
    }

    #
    # NOTE: Maybe show usage data for all commands.
    #
    if {![info exists no(showEndingUsageData)] && \
        [llength [info commands object]] > 0} then {
      #
      # HACK: Many things can go wrong here and we do not want to cause
      #       problems for the test run; therefore, wrap all this usage
      #       data gathering and reporting in a [catch] block.
      #
      foreach usageKind [list Command Function Procedure Operator] {
        if {[catch {
          unset -nocomplain usageData

          foreach usageType [list Count Microseconds] {
            set dictionary null; set error null

            set code [object invoke Interpreter.GetActive \
                GetUsageData $usageKind $usageType dictionary \
                error]

            if {$code eq "Ok"} then {
              object foreach -alias pair $dictionary {
                set value [$pair Value]

                if {$value == 0} then {continue}
                set key [lindex [split [$pair Key] \t] 2]

                if {$usageKind ne "Command" || \
                    ([catch {info cmdtype $key} cmdType] == 0 && \
                    $cmdType in [list native ensemble])} then {
                  lappend usageData($key) [list $usageType $value]
                }
              }
            } else {
              tputs $test_channel [appendArgs \
                  "---- received usage data error: " \
                  [getStringFromObjectHandle $error] \n]
            }
          }

          array get usageData
        } usage] == 0} then {
          tputs $test_channel [appendArgs \
              "---- " [string tolower $usageKind] " usage data: " \
              [formatListAsDict $usage <none>] \n]
        } else {
          tputs $test_channel [appendArgs \
              "---- caught " [string tolower $usageKind] \
              " usage data error: " $usage \n]
        }
      }

      unset -nocomplain code dictionary error usageKind usageType \
          pair usageData key value cmdType usage
    }

    #
    # NOTE: Check the overall test suite results and report them now.
    #
    reportTestDuplicateNames $test_channel

    tputs $test_channel \n; # NOTE: Blank line.

    reportTestConstraintCounts $test_channel $eagle_tests(SkippedNames)
    reportTestResultCounts $test_channel percent

    set success [testCheckOverallResult \
        $test_channel $percent $haveStartSentry exitCode]

    tputs $test_channel \n; # NOTE: Blank line.

    #
    # NOTE: Attempt to log the overall test suite results with the test
    #       server, as long as we are not forbidden from doing so.
    #
    if {![info exists no(logRemoteTestResults)] && \
        ![info exists no(eagleLogRemoteTestResults)]} then {
      catch {logRemoteTestResults $success}; # NOTE: Server errors, etc.
    }

    unset percent success
  } else {
    #
    # NOTE: Check the overall test suite results and report them now.
    #
    tputs $test_channel \n; # NOTE: Blank line.

    reportTestResultCounts $test_channel percent

    set success [testCheckOverallResult \
        $test_channel $percent $haveStartSentry exitCode]

    tputs $test_channel \n; # NOTE: Blank line.

    #
    # NOTE: Attempt to log the overall test suite results with the test
    #       server, as long as we are not forbidden from doing so.
    #
    if {![info exists no(logRemoteTestResults)] && \
        ![info exists no(tclLogRemoteTestResults)]} then {
      logRemoteTestResults $success; # NOTE: Server errors, etc.
    }

    unset percent success
  }

  #
  # NOTE: We no longer need the result of the start-of-log sentry check.
  #
  unset haveStartSentry

  #
  # NOTE: Call the Tcl test cleanup procedure now to give it a chance to do
  #       any custom cleanup that has been registered.
  #
  ::tcltest::cleanupTests

  #
  # NOTE: Check for and process any custom test epilogue script that may
  #       be set in the environment.
  #
  sourceIfValid epilogue [getEnvironmentVariable testEpilogue]

  #
  # NOTE: Are we being prevented from evaluating the "post-test" script?
  #
  if {![info exists no(postTest)]} then {
    #
    # NOTE: Evaluate the specified post-test script now, if any.
    #
    if {[info exists test_script(post)] && \
        [string length $test_script(post)] > 0} then {
      #
      # TODO: Perhaps use [uplevel] here instead of [eval].  For now, it does
      #       not matter since we enforce this file being evaluated at the
      #       top-level.
      #
      if {[catch $test_script(post) test_script(post,result)]} then {
        #
        # NOTE: Make 100% sure, even in "quiet" mode, that this script error
        #       gets into the test log file.
        #
        tputs $test_channel [appendArgs "---- post-test script error: " \
            $test_script(post,result) \n]

        #
        # NOTE: The post-test script failed in some way.  This is considered
        #       to be an overall failure of the test suite; therefore, raise
        #       the error now that we are sure it has been recorded in the
        #       test log file.
        #
        unset -nocomplain test_suite_running
        error $test_script(post,result)
      }
    }
  }

  #
  # NOTE: Indicate that the test suite is no longer running.
  #
  if {[info exists test_suite_running] && $test_suite_running} then {
    set test_suite_running false
  }

  #
  # NOTE: Do we need to exit now?
  #
  if {[isExitOnComplete]} then {
    #
    # NOTE: Exit now.  In Eagle, this will not exit the entire process.
    #       Zero (0) will be the exit code if all the selected tests have
    #       succeeded or the test success threshold has been met or
    #       exceeded; otherwise, one (1) will be the exit code.
    #
    exit $exitCode
  } else {
    #
    # NOTE: For Eagle, even when not exiting, we still set the ExitCode
    #       property of the interpreter.
    #
    if {[isEagle] && [llength [info commands object]] > 0} then {
      object invoke -alias Interpreter.GetActive ExitCode $exitCode
    }

    unset exitCode
  }
}
