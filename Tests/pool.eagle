###############################################################################
#
# pool.eagle --
#
# Written by Joe Mistachkin.
# Released to the public domain, use at your own risk!
#
###############################################################################

package require Eagle
package require Eagle.Library
package require Eagle.Test

runTestPrologue

###############################################################################

package require System.Data.SQLite.Test
runSQLiteTestPrologue

###############################################################################

runTest {test pool-1.1 {dispose connection with weak pool} -setup {
  object invoke -flags +NonPublic \
      System.Data.SQLite.SQLiteConnectionPool CreateAndInitialize \
      null false true
} -body {
  setupDb [set fileName pool-1.1.db] "" "" "" "" "Pooling=True;"

  sql execute $db "CREATE TABLE t1(x);"
  sql execute $db "INSERT INTO t1 (x) VALUES(NULL);"

  cleanupDb $fileName db true false false false false

  set id [object invoke Interpreter.GetActive NextId]
  set dataSource [file join [getDatabaseDirectory] $fileName]

  set sql { \
    INSERT INTO t1 (x) VALUES(?); \
  }

  unset -nocomplain results errors

  set code [compileCSharpWith [subst {
    using System;
    using System.Data;
    using System.Data.SQLite;

    namespace _Dynamic${id}
    {
      public static class Test${id}
      {
        public static void Main(string\[\] args)
        {
          int iteration = int.Parse(args\[0\]);

          using (SQLiteConnection connection = new SQLiteConnection(
              "Data Source=${dataSource};Pooling=True;" +
              "[getTestProperties]"))
          {
            connection.Open();

            using (SQLiteCommand command = new SQLiteCommand("${sql}",
                connection))
            {
              command.Parameters.Add(new SQLiteParameter("", iteration));
              command.ExecuteNonQuery();
            }
          }

          GC.Collect();
          GC.WaitForPendingFinalizers();
          GC.Collect();
        }
      }
    }
  }] true false true results errors System.Data.SQLite.dll]

  if {$code ne "Ok"} then {
    error [expr {[info exists errors] ? $errors : "C# compilation failed"}]
  }

  set m 100
  set counts(rows) 0
  set counts(create,before) [getCreateCount]
  set counts(dispose,before) [getDisposeCount]

  set time [time {
    set args [object create -alias String\[\] 1]

    for {set i 0} {$i < $m} {incr i} {
      $args SetValue $i 0

      object invoke -alias _Dynamic${id}.Test${id} Main $args

      setupDb $fileName "" "" "" "" "Pooling=True;" true false

      incr counts(rows) [sql execute -execute \
          scalar $db "SELECT COUNT(*) FROM t1;"]

      cleanupDb $fileName db false false false false false
    }
  }]

  tputs $test_channel [appendArgs \
      "---- attempted to open / close " $m " pooled connections in " \
      $time \n]

  set counts(create,after) [getCreateCount]
  set counts(dispose,after) [getDisposeCount]

  set counts(create,diff) [expr {
    $counts(create,after) - $counts(create,before)
  }]

  set counts(dispose,diff) [expr {
    $counts(dispose,after) - $counts(dispose,before)
  }]

  tputs $test_channel [appendArgs \
      "---- created extra connections " $counts(create,diff) \
      " times in this test\n"]

  tputs $test_channel [appendArgs \
      "---- disposed extra connections " $counts(dispose,diff) \
      " times in this test\n"]

  list $counts(rows) [expr {
    $counts(create,after) >= $counts(create,before)
  }]
} -cleanup {
  catch {
    object invoke -flags +NonPublic \
        System.Data.SQLite.SQLiteConnectionPool ClearAllPools
  }

  catch {
    object invoke -flags +NonPublic \
        System.Data.SQLite.SQLiteConnectionPool TerminateAndReset \
        null
  }

  cleanupDb $fileName

  unset -nocomplain results errors code sql dataSource id
  unset -nocomplain args time i m counts db fileName
} -constraints {eagle monoBug28 command.sql compile.DATA SQLite\
System.Data.SQLite compileCSharp} -result {5150 True}}

###############################################################################

runTest {test pool-1.2 {dispose connection with strong pool} -setup {
  object invoke -flags +NonPublic \
      System.Data.SQLite.SQLiteConnectionPool CreateAndInitialize \
      null true true
} -body {
  setupDb [set fileName pool-1.2.db] "" "" "" "" "Pooling=True;"

  sql execute $db "CREATE TABLE t1(x);"
  sql execute $db "INSERT INTO t1 (x) VALUES(NULL);"

  cleanupDb $fileName db true false false false false

  set id [object invoke Interpreter.GetActive NextId]
  set dataSource [file join [getDatabaseDirectory] $fileName]

  set sql { \
    INSERT INTO t1 (x) VALUES(?); \
  }

  unset -nocomplain results errors

  set code [compileCSharpWith [subst {
    using System;
    using System.Data;
    using System.Data.SQLite;

    namespace _Dynamic${id}
    {
      public static class Test${id}
      {
        public static void Main(string\[\] args)
        {
          int iteration = int.Parse(args\[0\]);

          using (SQLiteConnection connection = new SQLiteConnection(
              "Data Source=${dataSource};Pooling=True;" +
              "[getTestProperties]"))
          {
            connection.Open();

            using (SQLiteCommand command = new SQLiteCommand("${sql}",
                connection))
            {
              command.Parameters.Add(new SQLiteParameter("", iteration));
              command.ExecuteNonQuery();
            }
          }

          GC.Collect();
          GC.WaitForPendingFinalizers();
          GC.Collect();
        }
      }
    }
  }] true false true results errors System.Data.SQLite.dll]

  if {$code ne "Ok"} then {
    error [expr {[info exists errors] ? $errors : "C# compilation failed"}]
  }

  set m 100
  set counts(rows) 0
  set counts(create,before) [getCreateCount]
  set counts(dispose,before) [getDisposeCount]

  set time [time {
    set args [object create -alias String\[\] 1]

    for {set i 0} {$i < $m} {incr i} {
      $args SetValue $i 0

      object invoke -alias _Dynamic${id}.Test${id} Main $args

      setupDb $fileName "" "" "" "" "Pooling=True;" true false

      incr counts(rows) [sql execute -execute \
          scalar $db "SELECT COUNT(*) FROM t1;"]

      cleanupDb $fileName db false false false false false
    }
  }]

  tputs $test_channel [appendArgs \
      "---- attempted to open / close " $m " pooled connections in " \
      $time \n]

  set counts(create,after) [getCreateCount]
  set counts(dispose,after) [getDisposeCount]

  set counts(create,diff) [expr {
    $counts(create,after) - $counts(create,before)
  }]

  set counts(dispose,diff) [expr {
    $counts(dispose,after) - $counts(dispose,before)
  }]

  tputs $test_channel [appendArgs \
      "---- created extra connections " $counts(create,diff) \
      " times in this test\n"]

  tputs $test_channel [appendArgs \
      "---- disposed extra connections " $counts(dispose,diff) \
      " times in this test\n"]

  list $counts(rows) [expr {
    $counts(create,after) == $counts(create,before)
  }]
} -cleanup {
  catch {
    object invoke -flags +NonPublic \
        System.Data.SQLite.SQLiteConnectionPool ClearAllPools
  }

  catch {
    object invoke -flags +NonPublic \
        System.Data.SQLite.SQLiteConnectionPool TerminateAndReset \
        null
  }

  cleanupDb $fileName

  unset -nocomplain results errors code sql dataSource id
  unset -nocomplain args time i m counts db fileName
} -constraints {eagle monoBug28 command.sql compile.DATA SQLite\
System.Data.SQLite compileCSharp} -result {5150 True}}

###############################################################################

runTest {test pool-1.3 {dispose connection with legacy pool} -setup {
  catch {
    object invoke -flags +NonPublic \
        System.Data.SQLite.SQLiteConnectionPool ClearAllPools
  }

  catch {
    object invoke -flags +NonPublic \
        System.Data.SQLite.SQLiteConnectionPool TerminateAndReset \
        null
  }
} -body {
  setupDb [set fileName pool-1.3.db] "" "" "" "" "Pooling=True;"

  sql execute $db "CREATE TABLE t1(x);"
  sql execute $db "INSERT INTO t1 (x) VALUES(NULL);"

  cleanupDb $fileName db true false false false false

  set id [object invoke Interpreter.GetActive NextId]
  set dataSource [file join [getDatabaseDirectory] $fileName]

  set sql { \
    INSERT INTO t1 (x) VALUES(?); \
  }

  unset -nocomplain results errors

  set code [compileCSharpWith [subst {
    using System;
    using System.Data;
    using System.Data.SQLite;

    namespace _Dynamic${id}
    {
      public static class Test${id}
      {
        public static void Main(string\[\] args)
        {
          int iteration = int.Parse(args\[0\]);

          using (SQLiteConnection connection = new SQLiteConnection(
              "Data Source=${dataSource};" +
              "[getTestProperties]"))
          {
            connection.Open();

            using (SQLiteCommand command = new SQLiteCommand("${sql}",
                connection))
            {
              command.Parameters.Add(new SQLiteParameter("", iteration));
              command.ExecuteNonQuery();
            }
          }

          GC.Collect();
          GC.WaitForPendingFinalizers();
          GC.Collect();
        }
      }
    }
  }] true false true results errors System.Data.SQLite.dll]

  if {$code ne "Ok"} then {
    error [expr {[info exists errors] ? $errors : "C# compilation failed"}]
  }

  set m 100
  set counts(rows) 0
  set counts(create,before) [getCreateCount]
  set counts(dispose,before) [getDisposeCount]

  set time [time {
    set args [object create -alias String\[\] 1]

    for {set i 0} {$i < $m} {incr i} {
      $args SetValue $i 0

      object invoke -alias _Dynamic${id}.Test${id} Main $args

      setupDb $fileName "" "" "" "" "" true false

      incr counts(rows) [sql execute -execute \
          scalar $db "SELECT COUNT(*) FROM t1;"]

      cleanupDb $fileName db false false false false false
    }
  }]

  tputs $test_channel [appendArgs \
      "---- attempted to open / close " $m " pooled connections in " \
      $time \n]

  set counts(create,after) [getCreateCount]
  set counts(dispose,after) [getDisposeCount]

  set counts(create,diff) [expr {
    $counts(create,after) - $counts(create,before)
  }]

  set counts(dispose,diff) [expr {
    $counts(dispose,after) - $counts(dispose,before)
  }]

  tputs $test_channel [appendArgs \
      "---- created extra connections " $counts(create,diff) \
      " times in this test\n"]

  tputs $test_channel [appendArgs \
      "---- disposed extra connections " $counts(dispose,diff) \
      " times in this test\n"]

  list $counts(rows) [expr {
    $counts(create,after) >= $counts(create,before)
  }]
} -cleanup {
  catch {
    object invoke -flags +NonPublic \
        System.Data.SQLite.SQLiteConnectionPool ClearAllPools
  }

  catch {
    object invoke -flags +NonPublic \
        System.Data.SQLite.SQLiteConnectionPool TerminateAndReset \
        null
  }

  cleanupDb $fileName

  unset -nocomplain results errors code sql dataSource id
  unset -nocomplain args time i m counts db fileName
} -constraints {eagle monoBug28 command.sql compile.DATA SQLite\
System.Data.SQLite compileCSharp} -result {5150 True}}

###############################################################################

runSQLiteTestEpilogue
runTestEpilogue
