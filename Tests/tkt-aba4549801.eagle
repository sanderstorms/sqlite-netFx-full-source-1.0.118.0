###############################################################################
#
# tkt-aba4549801.eagle --
#
# Written by Joe Mistachkin.
# Released to the public domain, use at your own risk!
#
###############################################################################

package require Eagle
package require Eagle.Library
package require Eagle.Test

runTestPrologue

###############################################################################

package require System.Data.SQLite.Test
runSQLiteTestPrologue

###############################################################################

runTest {test tkt-aba4549801-1.1 {SQLiteConnection.Changed event} -setup {
  proc onChanged { sender e } {
    set list [list]

    if {[isNonNullObjectHandle $sender] && \
        [regexp -- $::patterns(connection) $sender]} then {
      set connectionString [$sender -flags +NonPublic _connectionString]

      if {![string match "*\[/\\\]tkt-aba4549801-1.1.db\;*" \
          $connectionString]} then {
        #
        # NOTE: This is a "stray" connection (i.e. it is not
        #       part of this test); therefore, ignore events
        #       for it.
        #
        return
      }

      lappend list 1
    } elseif {[string length $sender] > 0} then {
      lappend list $sender
    }

    if {[isNonNullObjectHandle $e] > 0} then {
      lappend list [$e EventType]

      set o1 [$e -objectflags NoDispose Transaction]

      if {[isNonNullObjectHandle $o1] && \
          [regexp -- $::patterns(transaction) $o1]} then {
        lappend list 1
      } elseif {[string length $o1] > 0} then {
        lappend list $o1
      }

      set o2 [$e -objectflags NoDispose Command]

      if {[isNonNullObjectHandle $o2] && \
          [regexp -- $::patterns(command) $o2]} then {
        lappend list 1
      } elseif {[string length $o2] > 0} then {
        lappend list $o2
      }

      set o3 [$e -objectflags NoDispose DataReader]

      if {[isNonNullObjectHandle $o3] && \
          [regexp -- $::patterns(dataReader) $o3]} then {
        lappend list 1
      } elseif {[string length $o3] > 0} then {
        lappend list $o3
      }

      set o4 [$e -objectflags NoDispose CriticalHandle]

      if {[isNonNullObjectHandle $o4] && \
          ([regexp -- $::patterns(handle1) $o4] || \
           [regexp -- $::patterns(handle2) $o4])} then {
        lappend list 1
      } elseif {[string length $o4] > 0} then {
        lappend list $o4
      }
    }

    lappend ::result $list
  }

  set patterns(connection) {^System#Data#SQLite#SQLiteConnection#\d+$}
  set patterns(transaction) {^System#Data#SQLite#SQLiteTransaction#\d+$}
  set patterns(command) {^System#Data#SQLite#SQLiteCommand#\d+$}
  set patterns(dataReader) {^System#Data#SQLite#SQLiteDataReader#\d+$}
  set patterns(handle1) {^System#Data#SQLite#SQLiteConnectionHandle#\d+$}
  set patterns(handle2) {^System#Data#SQLite#SQLiteStatementHandle#\d+$}

  set callback onChanged
  object invoke System.Data.SQLite.SQLiteConnection add_Changed $callback
} -body {
  setupDb [set fileName tkt-aba4549801-1.1.db]

  sql execute $db "CREATE TABLE t1(x);"

  set transaction [sql transaction begin $db]

  sql execute -execute reader $db \
      "INSERT INTO t1(x) VALUES(1); SELECT x FROM t1;"

  sql transaction commit $transaction

  cleanupDb $fileName

  set result
} -cleanup {
  object invoke System.Data.SQLite.SQLiteConnection remove_Changed $callback
  catch {object removecallback $callback}

  unset -nocomplain rows transaction result callback patterns db fileName

  rename onChanged ""
} -constraints {eagle command.object monoBug28 monoBug211 command.sql\
compile.DATA SQLite System.Data.SQLite} -result {{1 Opening} {1 Closing} {1\
NothingToDo} {1 Closed} {1 ConnectionStringPreview} {1 ConnectionString}\
{NewCriticalHandle 1} {1 NewCommand 1} {1 DisposingCommand 1} {1 Opened} {1\
NewCommand 1} {1 SqlStringPreview} {1 NewDataReader 1 1} {NewCriticalHandle 1}\
{1 DisposingDataReader 1 1} {1 ClosingDataReader 1 1} {1 DisposingCommand 1} {1\
NewCommand 1} {1 SqlStringPreview} {1 NewDataReader 1 1} {NewCriticalHandle 1}\
{1 DisposingDataReader 1 1} {1 ClosingDataReader 1 1} {1 DisposingCommand 1} {1\
NewCommand 1} {1 SqlStringPreview} {1 NewDataReader 1 1} {NewCriticalHandle 1}\
{1 DisposingDataReader 1 1} {1 ClosingDataReader 1 1} {1 DisposingCommand 1} {1\
NewTransaction 1} {1 NewCommand 1} {1 SqlStringPreview} {1 NewDataReader 1 1}\
{NewCriticalHandle 1} {NewCriticalHandle 1} {1 ClosingDataReader 1 1} {1\
DisposingCommand 1} {1 NewCommand 1} {1 SqlStringPreview} {1 NewDataReader 1 1}\
{NewCriticalHandle 1} {1 DisposingDataReader 1 1} {1 ClosingDataReader 1 1} {1\
DisposingCommand 1} {1 Closing} {1 Closed}}}

###############################################################################

runTest {test tkt-aba4549801-1.2 {Changed "Dispose" events} -setup {
  proc onChanged { sender e } {
    if {![isNonNullObjectHandle $sender] || \
        ![regexp -- $::patterns(connection) $sender]} then {
      #
      # NOTE: Skip tracking any events that do not pertain
      #       to a connection.
      #
      return
    }

    set connectionString [$sender -flags +NonPublic _connectionString]

    if {![string match "*\[/\\\]tkt-aba4549801-1.2.db\;*" \
        $connectionString]} then {
      #
      # NOTE: This is a "stray" connection (i.e. it is not
      #       part of this test); therefore, ignore events
      #       for it.
      #
      return
    }

    if {![isNonNullObjectHandle $e]} then {
      #
      # NOTE: Skip tracking events without the appropriate
      #       metadata.
      #
      return
    }

    set eventType [$e EventType]

    if {$eventType ni [list \
        Opening ConnectionString Opened Closing Closed \
        OpenedFromPool ClosedToPool DisposingConnection \
        DisposedConnection FinalizingConnection \
        FinalizedConnection NothingToDo]} then {
      #
      # NOTE: Skip tracking events of types that we are not
      #       interested in.
      #
      return
    }

    lappend ::result $eventType
  }

  set patterns(connection) {^System#Data#SQLite#SQLiteConnection#\d+$}

  set callback onChanged
  object invoke System.Data.SQLite.SQLiteConnection add_Changed $callback
} -body {
  setupDb [set fileName tkt-aba4549801-1.2.db]
  set connection [getDbConnection]

  sql execute $db "CREATE TABLE t1(x);"

  sql execute -execute reader $db \
      "INSERT INTO t1(x) VALUES(1); SELECT x FROM t1;"

  $connection Dispose

  set result
} -cleanup {
  freeDbConnection connection false

  unset -nocomplain connection

  cleanupDb $fileName db true true true true true

  object invoke System.Data.SQLite.SQLiteConnection remove_Changed $callback
  catch {object removecallback $callback}

  unset -nocomplain rows result callback patterns db fileName

  rename onChanged ""
} -constraints {eagle command.object monoBug28 monoBug211 command.sql\
compile.DATA SQLite System.Data.SQLite} -result {Opening Closing NothingToDo\
Closed ConnectionString Opened DisposingConnection Closing Closed\
DisposedConnection}}

###############################################################################

runTest {test tkt-aba4549801-1.3 {Changed "Finalize" events} -setup {
  proc onChanged { sender e } {
    if {![isNonNullObjectHandle $sender] || \
        ![regexp -- $::patterns(connection) $sender]} then {
      #
      # NOTE: Skip tracking any events that do not pertain
      #       to a connection.
      #
      return
    }

    set connectionString [$sender -flags +NonPublic _connectionString]

    if {![string match "*\[/\\\]tkt-aba4549801-1.3.db\;*" \
        $connectionString]} then {
      #
      # NOTE: This is a "stray" connection (i.e. it is not
      #       part of this test); therefore, ignore events
      #       for it.
      #
      return
    }

    if {![isNonNullObjectHandle $e]} then {
      #
      # NOTE: Skip tracking events without the appropriate
      #       metadata.
      #
      return
    }

    set eventType [$e EventType]

    if {$eventType ni [list \
        Opening ConnectionString Opened Closing Closed \
        OpenedFromPool ClosedToPool DisposingConnection \
        DisposedConnection FinalizingConnection \
        FinalizedConnection NothingToDo]} then {
      #
      # NOTE: Skip tracking events of types that we are not
      #       interested in.
      #
      return
    }

    lappend ::result $eventType
  }

  set patterns(connection) {^System#Data#SQLite#SQLiteConnection#\d+$}

  set callback onChanged
  object invoke System.Data.SQLite.SQLiteConnection add_Changed $callback
} -body {
  setupDb [set fileName tkt-aba4549801-1.3.db]
  set connection [getDbConnection]

  sql execute $db "CREATE TABLE t1(x);"

  sql execute -execute reader $db \
      "INSERT INTO t1(x) VALUES(1); SELECT x FROM t1;"

  object invoke -flags +NonPublic \
      System.Data.SQLite.SQLiteConnection _lastConnectionInOpen null

  freeDbConnection connection false
  removeDbConnection

  collectGarbage $test_channel

  set result
} -cleanup {
  freeDbConnection connection true true

  unset -nocomplain connection

  cleanupDb $fileName db true true true true true

  object invoke System.Data.SQLite.SQLiteConnection remove_Changed $callback
  catch {object removecallback $callback}

  unset -nocomplain rows result callback patterns db fileName

  rename onChanged ""
} -constraints {eagle command.object monoBug28 monoBug211 command.sql\
compile.DATA SQLite System.Data.SQLite} -result {Opening Closing NothingToDo\
Closed ConnectionString Opened FinalizingConnection Closing Closed\
FinalizedConnection}}

###############################################################################

runSQLiteTestEpilogue
runTestEpilogue
